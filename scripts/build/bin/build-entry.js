const minimist = require("minimist");
const chalk = require('chalk');
const path = require("path");
const fs = require("fs");
const argv = minimist(process.argv);
const render = require("json-templater/string");
const uppercamelcase = require("uppercamelcase");
const endOfLine = require("os").EOL;

const SRC = argv.src;

const packagesDir = path.resolve(process.cwd(), SRC, "./packages");

const ComponentNames = fs
  .readdirSync(packagesDir)
  .filter((item) => item !== "styles");

const OUTPUT_PATH = path.resolve(process.cwd(), SRC, './src/index.js');
const VERSION = require(path.resolve(process.cwd(), SRC, "./package.json")).version;
var IMPORT_TEMPLATE =
  "import {{name}} from '../packages/{{package}}/index.js';";
var INSTALL_COMPONENT_TEMPLATE = "  {{name}}";
var MAIN_TEMPLATE = `/* Automatically generated by 'scripts/build/bin/build-entry.js' */

{{include}}

const components = [
{{install}},
];

const install = function(Vue, opts = {}) {
  if (install.installed) return
  install.installed = true
  components.forEach(component => {
    Vue.component(component.name, component);
  });
};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

export default {
  install,
  version: '{{version}}',
{{list}}
};
`;

var includeComponentTemplate = [];
var installTemplate = [];
var listTemplate = [];

ComponentNames.forEach((name) => {
  var componentName = uppercamelcase(name);

  includeComponentTemplate.push(
    render(IMPORT_TEMPLATE, {
      name: componentName,
      package: name,
    })
  );

  if (
    [
      "Loading",
      "MessageBox",
      "Notification",
      "Message",
      "InfiniteScroll",
    ].indexOf(componentName) === -1
  ) {
    installTemplate.push(
      render(INSTALL_COMPONENT_TEMPLATE, {
        name: componentName,
        component: name,
      })
    );
  }

  if (componentName !== "Loading") listTemplate.push(`  ${componentName}`);
});

var template = render(MAIN_TEMPLATE, {
  include: includeComponentTemplate.join(endOfLine),
  install: installTemplate.join("," + endOfLine),
  version:
    process.env.VERSION ||
    VERSION,
  list: listTemplate.join("," + endOfLine),
});



fs.writeFileSync(OUTPUT_PATH, template);
console.log(chalk.green("[build entry] DONE:", OUTPUT_PATH))
